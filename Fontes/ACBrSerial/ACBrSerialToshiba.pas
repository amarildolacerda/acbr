unit ACBrSerialToshiba;
{**************************************************************************}
{                                                                          }
{    This C DLL header file first (automatic) conversion generated by:     }
{    HeadConv 4.0 (c) 2000 by Bob Swart (aka Dr.Bob - www.drbob42.com)     }
{      Final Delphi-Jedi (Darth) command-line units edition                }
{                                                                          }
{    Generated Date: 06/12/2016                                            }
{    Generated Time: 13:20:22                                              }
{                                                                          }
{**************************************************************************}

interface
uses
{$IFDEF WIN32}
  Windows, System.SysUtils;
{$ELSE}
  Wintypes, WinProcs;
{$ENDIF}


{=> TGCSSUREMARK.H <=}

{+// }
{-* File: tgcs1nr.h }
{-* var Author: io Tofanelli }
{-* }
{-* Arquivo header das funcoes exportadas da biblioteca TGCSSureMark }
{-* }
{-* Created on 5 de Marco de 2013, 08:51 }
{= }

{$IFNDEF TGCS1NR_H}
{$DEFINE TGCS1NR_H}

const
  VERSAO = '1.3.7.0';

{$IFNDEF TRUE}
const
  TRUE = 1;
{$ENDIF}

{$IFNDEF FALSE}
const
  FALSE = 0;
{$ENDIF}

{/// Bibliotecas especificas de cada sistema operacional }
{$IFDEF __linux__}
{///linux code goes here }
{$DEFINE EXPORT_DLL}
{$DEFINE CALL_TYPE}
{$ELSE _WIN32_}
{/// windows code goes here }
//const
type
  EXPORT_DLL = integer;// 'TGCSSureMark.dll';//  //__declspec(dllexport);
//const
//  CALL_TYPE = stdcall;
{$DEFINE EXPORT_DLL}
{$DEFINE CALL_TYPE}
{$ELSE}
{$DEFINE EXPORT_DLL}
{$DEFINE CALL_TYPE}
{$ENDIF}

{/// Caracteres de comandos }
const
  NUL = $00;
const
  SOH = $01;
const
  HTAB = $09;
const
  LF = $0A;
const
  CR = $0D;
const
  ESC = $1B;
const
  GS = $1D;

{/// Bits em um byte }
const
  BIT0 = 1;
const
  BIT1 = 2;
const
  BIT2 = 4;
const
  BIT3 = 8;
const
  BIT4 = 16;
const
  BIT5 = 32;
const
  BIT6 = 64;
const
  BIT7 = 128;

const
  BITS_POR_BYTE = 8;

{///Arquivos utilizados na biblioteca }
const
  NOME_ARQUIVO_LOG = 'TGCSSureMark';
const
  ARQUIVO_NVS = 'TGCSSureMarkNVS.bin';
const
  ARQUIVO_LOG = 'TGCSSureMark.log';
const
  ARQUIVO_CONF_COMM = 'TGCSSureMarkComm.ini';
const
  ARQUIVO_CONF_GERAL = 'TGCSSureMarkConf.ini';


const
  TAMANHO_STATUS_BYTES = 16; {//Tamanho do buffer de status}
const
  TAMANHO_STATUS_BYTES_COM_CONTADOR = 18; {//Tamanho do buffer de status com os dois bytes iniciais de contagem}
const
  TAMANHO_VERSAO_LIB_BYTES = 8; {//Tamanho do buffer de versao da biblioteca}
const
  TAMANHO_VERSAO_FIRMWARE_BYTES = 2; {//Tamanho do buffer de versao do firmware}
const
  TAMANHO_MAXIMO_RESULTADO_CMC7 = 67;
const
  TAMANHO_BUFFER_IMPRESSAO = 32768;
const
  TAMANHO_MAXIMO_LINHA_CHEQUE = 86;
const
  TAMANHO_STATUS_MODELO_IMPRESSORA = 1;
const
  TAMANHO_STATUS_CODIFICACAO_CARACTERES = 1;
const
  TAMANHO_STATUS_DOCUMENTO = 1;
const
  TAMANHO_STATUS_PAPEL = 1;
const
  TAMANHO_STATUS_GAVETA = 1;
const
  TAMANHO_STATUS_TAMPA = 1;
const
  TAMANHO_STATUS_LOGO_ID = 1;
const
  TAMANHO_STATUS_MENSAGEM_ID = 1;
const
  TAMANHO_MAXIMO_LINHA_AUTENTICACAO = 47;

{///modelos das impressoras suportadas }
const
  MODELO_IMPRESSORA_2CR = $9E;
const
  MODELO_IMPRESSORA_1NR = $80;

{/// Tipos de codigos de barras }
const
  CODIGO_BARRAS_UPCA = 0;
const
  CODIGO_BARRAS_UPCE = 1;
const
  CODIGO_BARRAS_JAN13 = 2;
const
  CODIGO_BARRAS_JAN8 = 3;
const
  CODIGO_BARRAS_CODE39 = 4;
const
  CODIGO_BARRAS_ITF = 5;
const
  CODIGO_BARRAS_CODABAR = 6;
const
  CODIGO_BARRAS_CODE128C = 7;
const
  CODIGO_BARRAS_CODE93 = 8;
const
  CODIGO_BARRAS_CODE128ABC = 9;

{///Identificacao do SET utilizado do CODE 128 }
const
  CODE128_SET_A = 103;
const
  CODE128_SET_B = 104;
const
  CODE128_SET_C = 105;

{/// QR CODE }
const
  QRCODE_TAM_MAX = 1000;
const
  QRCODE_MODO_CODIFICACAO_BYTE = 0;
const
  QRCODE_MODO_CODIFICACAO_ALFANUMERICO = 1;
const
  QRCODE_MODO_CODIFICACAO_NUMERICO = 2;
const
  QRCODE_MODO_CODIFICACAO_KANJI = 3;
const
  QRCODE_MODO_CODIFICACAO_ECI = 4;
const
  QRCODE_MODO_CODIFICACAO_MIXING = 5;
const
  QRCODE_ERROR_L7 = 0;
const
  QRCODE_ERROR_M15 = 1;
const
  QRCODE_ERROR_Q25 = 2;
const
  QRCODE_ERROR_H30 = 3;
const
  QRCODE_ECI_PDF417_DEFAULT_GLI = 0;
const
  QRCODE_ECI_PDF417_LATIN1_GLI = 1;
const
  QRCODE_ECI_PDF417_DEFAULT_ECI = 2;
const
  QRCODE_ECI_ISO8859_1 = 3;
const
  QRCODE_ECI_ISO8859_2 = 4;
const
  QRCODE_ECI_ISO8859_3 = 5;
const
  QRCODE_ECI_ISO8859_4 = 6;
const
  QRCODE_ECI_ISO8859_5 = 7;
const
  QRCODE_ECI_ISO8859_6 = 8;
const
  QRCODE_ECI_ISO8859_7 = 9;
const
  QRCODE_ECI_ISO8859_8 = 10;
const
  QRCODE_ECI_ISO8859_9 = 11;
const
  QRCODE_ECI_ISO8859_10 = 12;
const
  QRCODE_ECI_ISO8859_11 = 13;
const
  QRCODE_ECI_ISO8859_12 = 14;
const
  QRCODE_ECI_ISO8859_13 = 15;
const
  QRCODE_ECI_ISO8859_14 = 16;
const
  QRCODE_ECI_ISO8859_15 = 17;
const
  QRCODE_ECI_ISO8859_16 = 18;
const
  QRCODE_ECI_SJIS = 20;
const
  QRCODE_ECI_UTF8 = 26;

{///posicoes HRI dos codigos de barras }
const
  CODIGO_BARRAS_HRI_NAO_IMPRESSO = 0;
const
  CODIGO_BARRAS_HRI_ACIMA = 1;
const
  CODIGO_BARRAS_HRI_ABAIXO = 2;
const
  CODIGO_BARRAS_HRI_ACIMA_ABAIXO = 3;

{///fontes HRI }
const
  CODIGO_BARRAS_FONTE_A = 0;
const
  CODIGO_BARRAS_FONTE_B = 1;

{///alinhamentos do texto }
const
  ALINHAMENTO_TEXTO_A_ESQUERDA = 0;
const
  ALINHAMENTO_TEXTO_CENTRO = 1;
const
  ALINHAMENTO_TEXTO_A_DIREITA = 2;

{///status papel }
const
  STATUS_SEM_PAPEL = 3;
const
  STATUS_PAPEL_NIVEL_CRITICO = 2;
const
  STATUS_POUCO_PAPEL = 1;
const
  STATUS_PAPEL_OK = 0;

{///status documento }
const
  STATUS_DOCUMENTO_SENSOR_FRONTAL_SUPERIOR = 3;
const
  STATUS_DOCUMENTO_SENSOR_SUPERIOR = 2;
const
  STATUS_DOCUMENTO_SENSOR_FRONTAL = 1;
const
  STATUS_SEM_DOCUMENTO = 0;

{/// configuracao de impressao em cores }
const
  COR_FRACA_DESABILITADA = 0;
const
  COR_FRACA_CARACTERE_COMPLETO = 1;
const
  COR_FRACA_MEIO_CARACTERE = 2;

{/// Paginas de codificacao de caracteres suportados pela impressora }
const
  QUANTIDADE_CODIFICACOES = 25;
const
  CODIFICACAO_437 = 0;
const
  CODIFICACAO_858 = 1;
const
  CODIFICACAO_863 = 2;
const
  CODIFICACAO_860 = 3;
const
  CODIFICACAO_865 = 4;
const
  CODIFICACAO_GENERICA = 5;
const
  CODIFICACAO_DEFINIDA_PELO_USUARIO = 6;
const
  CODIFICACAO_869 = 7;
const
  CODIFICACAO_857 = 8;
const
  CODIFICACAO_864 = 9;
const
  CODIFICACAO_867 = 10;
const
  CODIFICACAO_852 = 11;
const
  CODIFICACAO_848 = 12;
const
  CODIFICACAO_866 = 13;
const
  CODIFICACAO_872 = 14;
const
  CODIFICACAO_775 = 15;
const
  CODIFICACAO_861 = 16;
const
  CODIFICACAO_1250 = 17;
const
  CODIFICACAO_1251 = 18;
const
  CODIFICACAO_1252 = 19;
const
  CODIFICACAO_1253 = 20;
const
  CODIFICACAO_1254 = 21;
const
  CODIFICACAO_1255 = 22;
const
  CODIFICACAO_1256 = 23;
const
  CODIFICACAO_1257 = 24;

const
  CODIFICACAO_DEFINIDA_PELO_USUARIO_1 = 101;
const
  CODIFICACAO_DEFINIDA_PELO_USUARIO_2 = 102;
const
  CODIFICACAO_DEFINIDA_PELO_USUARIO_3 = 103;
const
  CODIFICACAO_DEFINIDA_PELO_USUARIO_4 = 104;

{/// Lista de codigo de erros }
const
  OK = 0;
const
  ERRO_PARAMETRO_INVALIDO = 1;
const
  ERRO_EXECUCAO_FUNCAO = 2;
const
  ERRO_SO_NAO_SUPORTADO = 3;
const
  ERRO_TIMEOUT_ENVIO = 4;
const
  ERRO_TIMEOUT_RESPOSTA = 5;
const
  ERRO_ENVIO_COMANDO = 6;
const
  ERRO_ABRIR_PORTA_SERIAL = 7;
const
  ERRO_FECHAR_PORTA_SERIAL = 8;
const
  ERRO_CONFIGURAR_PORTA_SERIAL = 9;
const
  ERRO_TIMEOUT = 10;
const
  ERRO_PORTA_SERIAL_NAO_INICIALIZADA = 11;
const
  ERRO_NVS_NAO_ENCONTRADO = 12;
const
  ERRO_ALOCAR_MEMORIA = 13;
const
  ERRO_LIMPAR_PORTA_SERIAL = 14;
const
  ERRO_TAMPA_ABERTA = 15;
const
  ERRO_FIM_PAPEL = 16;
const
  ERRO_COMUNICACAO = 17;
const
  ERRO_BUFFER_SUSPENSO = 18;
const
  ERRO_BUFFER_CHEIO = 19;
const
  ERRO_COMANDO_REJEITADO = 20;
const
  ERRO_ACESSO_PORTA = 21;
const
  ERRO_FIM_PAPEL_IMPRESSAO = 22;
const
  ERRO_TAMPA_ABERTA_IMPRESSAO = 23;
const
  ERRO_BUFFER_VAZIO = 24;
const
  ERRO_CONVERSAO_CARACTERES_NAO_SUPORTADA = 25;
const
  ERRO_TEXTO_NAO_CADASTRADA = 26;
const
  ERRO_TEXTO_JA_CADASTRADA = 27;
const
  ERRO_ABRIR_ARQUIVO = 28;
const
  ERRO_LEITURA_ARQUIVO = 29;
const
  ERRO_LOGO_NAO_CADASTRADA = 30;
const
  ERRO_LOGO_JA_CADASTRADA = 31;
const
  ERRO_TAMANHO_INVALIDO = 32;
const
  ERRO_CONEXAO_NAO_INICIADA = 33;
const
  ERRO_CONEXAO_JA_INICIADA = 34;
const
  ERRO_COMANDO_NAO_SUPORTADO = 35;
const
  ERRO_TIMEOUT_RETIRADA_DOCUMENTO = 36;
const
  ERRO_TIMEOUT_INSERCAO_DOCUMENTO = 37;
const
  ERRO_DOCUMENTO_NAO_INSERIDO = 38;
const
  ERRO_LAYOUT_CHEQUE_NAO_REGISTRADO = 39;
const
  ERRO_ARQ_CONF_INI_NAO_ENCONTRADO = 40;
const
  ERRO_IMPRESSORA_SUPERAQUECIDA = 41;

{///TAGS para formatacao em texto }
{///CARACTERE DE ESCAPE }
const
  TAG_ESCAPE = '\\';

{///NEGRITO }
const
  TAG_ATIVAR_NEGRITO = '<n>';
const
  TAG_ATIVAR_NEGRITO_SZ = 3;
const
  TAG_DESATIVAR_NEGRITO = '</n>';
const
  TAG_DESATIVAR_NEGRITO_SZ = 4;

{///ALTURA DUPLA }
const
  TAG_ATIVAR_ALTURA_DUPLA = '<ad>';
const
  TAG_ATIVAR_ALTURA_DUPLA_SZ = 4;
const
  TAG_DESATIVAR_ALTURA_DUPLA = '</ad>';
const
  TAG_DESATIVAR_ALTURA_DUPLA_SZ = 5;

{///LARGURA DUPLA }
const
  TAG_ATIVAR_LARGURA_DUPLA = '<ld>';
const
  TAG_ATIVAR_LARGURA_DUPLA_SZ = 4;
const
  TAG_DESATIVAR_LARGURA_DUPLA = '</ld>';
const
  TAG_DESATIVAR_LARGURA_DUPLA_SZ = 5;

{///SUBLINHADO }
const
  TAG_ATIVAR_SUBLINHADO = '<su>';
const
  TAG_ATIVAR_SUBLINHADO_SZ = 4;
const
  TAG_DESATIVAR_SUBLINHADO = '</su>';
const
  TAG_DESATIVAR_SUBLINHADO_SZ = 5;

{///SOBRESCRITO }
const
  TAG_ATIVAR_SOBRESCRITO = '<sb>';
const
  TAG_ATIVAR_SOBRESCRITO_SZ = 4;
const
  TAG_DESATIVAR_SOBRESCRITO = '</sb>';
const
  TAG_DESATIVAR_SOBRESCRITO_SZ = 5;

{///COR INVERTIDA }
const
  TAG_ATIVAR_COR_INVERTIDA = '<ci>';
const
  TAG_ATIVAR_COR_INVERTIDA_SZ = 4;
const
  TAG_DESATIVAR_COR_INVERTIDA = '</ci>';
const
  TAG_DESATIVAR_COR_INVERTIDA_SZ = 5;

{///COR FRACA CARACTERE COMPLETO }
const
  TAG_ATIVAR_COR_FRACA_CARACTERE_COMPLETO = '<cc>';
const
  TAG_ATIVAR_COR_FRACA_CARACTERE_COMPLETO_SZ = 4;
const
  TAG_DESATIVAR_COR_FRACA_CARACTERE_COMPLETO = '</cc>';
const
  TAG_DESATIVAR_COR_FRACA_CARACTERE_COMPLETO_SZ = 5;

{///COR FRACA MEIO CARACTERE }
const
  TAG_ATIVAR_COR_FRACA_MEIO_CARACTERE = '<cm>';
const
  TAG_ATIVAR_COR_FRACA_MEIO_CARACTERE_SZ = 4;
const
  TAG_DESATIVAR_COR_FRACA_MEIO_CARACTERE = '</cm>';
const
  TAG_DESATIVAR_COR_FRACA_MEIO_CARACTERE_SZ = 5;

{///TEXTO INVERTIDO }
const
  TAG_ATIVAR_TEXTO_INVERTIDO = '<ti>';
const
  TAG_ATIVAR_TEXTO_INVERTIDO_SZ = 4;
const
  TAG_DESATIVAR_TEXTO_INVERTIDO = '</ti>';
const
  TAG_DESATIVAR_TEXTO_INVERTIDO_SZ = 5;

{///NOVA LINHA }
const
  TAG_NOVA_LINHA = '<nl>';
const
  TAG_NOVA_LINHA_SZ = 4;

{///TABULACAO }
const
  TAG_TABULACAO = '<tb>';
const
  TAG_TABULACAO_SZ = 4;

{///CORTAR PAPEL }
const
  TAG_CORTAR_PAPEL = '<cp>';
const
  TAG_CORTAR_PAPEL_SZ = 4;

{///ALINHAMENTO A ESQUERDA }
const
  TAG_ALINHAMENTO_A_ESQUERDA = '<ale>';
const
  TAG_ALINHAMENTO_A_ESQUERDA_SZ = 5;

{///ALINHAMENTO CENTRO }
const
  TAG_ALINHAMENTO_CENTRO = '<alc>';
const
  TAG_ALINHAMENTO_CENTRO_SZ = 5;

{///ALINHAMENTO A DIREITA }
const
  TAG_ALINHAMENTO_A_DIREITA = '<ald>';
const
  TAG_ALINHAMENTO_A_DIREITA_SZ = 5;

{///Setores de memoria da impressora }
const
  SETOR_MEMORIA_LOGOS = 1;
const
  SETOR_MEMORIA_MENSAGENS = 2;
const
  SETOR_MEMORIA_CARACTERES_TERMICA = 4;

{///Numero de ids para setores de memoria }
const
  SETOR_MEMORIA_QTDE_LOGOS = 255;
const
  SETOR_MEMORIA_QTDE_MEMSAGENS = 255;
const
  SETOR_MEMORIA_QTDE_CARACTERES_TERMICA = 4;

const
  SETOR_MEMORIA_MENSAGEM_PAGINA_UM = 1;
const
  SETOR_MEMORIA_MENSAGEM_PAGINA_DOIS = 2;
const
  SETOR_MEMORIA_MENSAGEM_PAGINA_TRES = 3;
const
  SETOR_MEMORIA_MENSAGEM_PAGINA_QUATRO = 4;

{///Constantes do sinal sonoro }
const
  SINAL_SONORO_NOTA_DO = 0;
const
  SINAL_SONORO_NOTA_DO_SUSTENIDO = 1;
const
  SINAL_SONORO_NOTA_RE = 2;
const
  SINAL_SONORO_NOTA_RE_SUSTENIDO = 3;
const
  SINAL_SONORO_NOTA_MI = 4;
const
  SINAL_SONORO_NOTA_FA = 5;
const
  SINAL_SONORO_NOTA_FA_SUSTENIDO = 6;
const
  SINAL_SONORO_NOTA_SOL = 7;
const
  SINAL_SONORO_NOTA_SOL_SUSTENIDO = 8;
const
  SINAL_SONORO_NOTA_LA = 9;
const
  SINAL_SONORO_NOTA_LA_SUSTENIDO = 10;
const
  SINAL_SONORO_NOTA_SI = 11;
const
  SINAL_SONORO_SEM_NOTA = 12;
const
  SINAL_SONORO_BEEP_NORMAL = 15;

const
  SINAL_SONORO_OITAVA_UM = 0;
const
  SINAL_SONORO_OITAVA_DOIS = 32;
const
  SINAL_SONORO_OITAVA_TRES = 16;
const
  SINAL_SONORO_OITAVA_QUATRO = 48;

const
  SINAL_SONORO_VOLUME_ALTO = 0;
const
  SINAL_SONORO_VOLUME_BAIXO = 128;

{+//* }
{-* Abre comunicacao com a impressora }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  abrirComunicacao: function: integer  {$IFDEF WIN32} stdcall {$ENDIF};

{+//* }
{-* Envia sinal de abertura de gaveta }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  abrirGaveta: function: EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Alinha texto horizontalmente, a esquerda, a direita ou no centro. }
{-* @param alinhamento (alinhamento do texto) }
{-* ALINHAMENTO_TEXTO_A_ESQUERDA (padrao) }
{-* ALINHAMENTO_TEXTO_CENTRO }
{-* ALINHAMENTO_TEXTO_A_DIREITA }
{-* }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  alinharTexto: function(alinhamento: Byte): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Apaga um setor de memoria da impressora }
{-* @param setor (numero do setor que sera apagado) }
{-* SETOR_MEMORIA_LOGOS }
{-* SETOR_MEMORIA_MENSAGENS }
{-* SETOR_MEMORIA_CARACTERES_TERMICA }
{-* }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  apagarSetorMemoria: function(setor: Byte): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Ativa ou desativa o corte de papel }
{-* @param ativar }
{-* 0 = desativa corte de papel }
{-* 1 = ativa corte de papel }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  ativarCortePapel: function(ativar: Byte): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Ativa sinal sonora da impressora }
{-* @param nota (nota que sera usada no sinal sonoro) }
{-* SINAL_SONORO_NOTA_DO }
{-* SINAL_SONORO_NOTA_DO_SUSTENIDO }
{-* SINAL_SONORO_NOTA_RE }
{-* SINAL_SONORO_NOTA_RE_SUSTENIDO }
{-* SINAL_SONORO_NOTA_MI }
{-* SINAL_SONORO_NOTA_FA }
{-* SINAL_SONORO_NOTA_FA_SUSTENIDO }
{-* SINAL_SONORO_NOTA_SOL }
{-* SINAL_SONORO_NOTA_SOL_SUSTENIDO }
{-* SINAL_SONORO_NOTA_LA }
{-* SINAL_SONORO_NOTA_LA_SUSTENIDO }
{-* SINAL_SONORO_NOTA_SI }
{-* SINAL_SONORO_SEM_NOTA }
{-* SINAL_SONORO_BEEP_NORMAL }
{-* @param volume (volume do sinal sonoro) }
{-* SINAL_SONORO_VOLUME_ALTO }
{-* SINAL_SONORO_VOLUME_BAIXO }
{-* @param oitava }
{-* SINAL_SONORO_OITAVA_UM }
{-* SINAL_SONORO_OITAVA_DOIS }
{-* SINAL_SONORO_OITAVA_TRES }
{-* SINAL_SONORO_OITAVA_QUATRO }
{-* @param tempo (tempo em que o som sera reproduzido, sendo calculado o tempo de reproducao total como (tempo* 0.1 segundos)) }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  ativarSinalSonoro: function(nota: Byte; 
                              volume: Byte; 
                              oitava: Byte; 
                              tempo: Byte): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Autentica documento }
{-* @param linha1 (primeira linha da autenticacao) }
{-* @param tamanhoLinha1 (tamanho da primeira linha) }
{-* @param linha2 (segunda linha da autenticacao) }
{-* @param tamanhoLinha2 (tamanho da segunda linha) }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  autenticarDocumento: function(var linha1: Byte; 
                                tamanhoLinha1: Integer; 
                                var linha2: Byte; 
                                tamanhoLinha2: Integer): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Avanca papel a quantidade de linhas passada }
{-* @param quantidade (Numero de linhas que serao avancadas) }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  avancarLinha: function(quantidade: SmallInt): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Avanca tabulacao horizontal do papel }
{-* @param tabulacoes (numero de avancos de tabulacao desejado (valor entre 1 e 5)) }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  avancarTabulacao: function(tabulacoes: Byte): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Redefine uma parte dos caracteres das paginas de codigos definidas pelo usuario na memoria da impressora }
{-* @param pagina (qual a pagina de codigo que sera redefinida (paginas existentes: de 1 a 4)) }
{-* @param mapaCaracteres (os bytes que representam os novos caracteres) }
{-* @param caractereInicial (ASCII do caractere inicial da redefinicao) }
{-* @param caractereFinal (ASCII do caractere fina da redefinicao) }
{-* @param tamanhoMapa (tamanho, em bytes, do mapa de caracteres) }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  carregaConjuntoCaracteres: function(pagina: Byte; 
                                      var mapaCaracteres: Byte; 
                                      caractereInicial: Byte; 
                                      caractereFinal: Byte; 
                                      tamanhoMapa: Word): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Carrega uma imagem Bitmap na memoria da impressora para acesso rapido }
{-* @param id (numero da iamgem na memoria da impressora) }
{-* @param caminho (caminho para imagem que sera salva) }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  carregarLogo: function(id: Byte; 
                         var caminho: Byte): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Carrega um texto pre-formatado na memoria da impressora para acesso rapido }
{-* @param id (numero da mensagem na impressora) }
{-* @param texto (texto que sera salvo na impressora) }
{-* @param tamanhoTexto (tamanho do texto recebido) }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  carregarTextoPreDefinido: function(id: Byte; 
                                     var texto: Byte; 
                                     tamanhoTexto: Word): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Executa comando diretamente na impressora }
{-* @param comando (comando que sera enviado diretamente para impressora) }
{-* @param tamanhoComando (tamanho do comando enviado) }
{-* @param resposta (resposta esperada pela execucao do comando) }
{-* @param tamanhoResposta (tamanho da resposta esperada) }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  cmdDireto: function(var comando: Byte; 
                      tamanhoComando: Word; 
                      var resposta: Byte; 
                      tamanhoResposta: Word): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Configura texto para ser impresso com altura dupla }
{-* @param ativar (1 = ativa altura dupla, 0 = desativa altura dupla) }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  configurarAlturaDupla: function(ativar: Char): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Configura a conversao de caracteres automatica. }
{-* @param ativar Indica se a biblioteca deve converter o texto recebido na codificacao }
{-* do sistema para um texto codificado em uma paginacao que a impressora entenda. }
{-* Ao ativar a conversao automatica, a codificacao da impressora e configurada para a CODIFICACAO_858, que e multilingue. }
{-* @param codificacaoSistema Informa a codificacao que o sistema esta utilizando para os textos enviados. Caso ativar seja FALSE, esse parametro sera ignorado. }
{-* CODIFICACAO_437 - Estados Unidos }
{-* CODIFICACAO_858 - Multilingue (Padrao da impressora) }
{-* CODIFICACAO_863 - Frances do Canada }
{-* CODIFICACAO_860 - Portugal }
{-* CODIFICACAO_865 - Noruega }
{-* CODIFICACAO_GENERICA - Pagina generica da impressora }
{-* CODIFICACAO_DEFINIDA_PELO_USUARIO - Paginacao carregada pelo usuario na impressora. }
{-* CODIFICACAO_869 - Grego }
{-* CODIFICACAO_857 - Turco }
{-* CODIFICACAO_864 - Arabe }
{-* CODIFICACAO_867 - Hebraico (Israel) }
{-* CODIFICACAO_852 - Hungaro, Polones, Tcheco, Romeno, Eslovaco, Esloveno, Croata }
{-* CODIFICACAO_848 - Ucraniano }
{-* CODIFICACAO_866 - Russo (cirilico) }
{-* CODIFICACAO_872 - Bulgaro, Servio }
{-* CODIFICACAO_775 - Lituano, Letao, Estonia }
{-* CODIFICACAO_861 - Islandes }
{-* CODIFICACAO_1250 - Windows Latin 2 }
{-* CODIFICACAO_1251 - Windows Cirilico }
{-* CODIFICACAO_1252 - Windows Latin 1 }
{-* CODIFICACAO_1253 - Windows Grego }
{-* CODIFICACAO_1254 - Windows Turco }
{-* CODIFICACAO_1255 - Windows Hebraico }
{-* CODIFICACAO_1256 - Windows Arabe }
{-* CODIFICACAO_1257 - Windows Baltico (Rim) }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  configurarConversaoCaracteres: function(ativar: Byte; 
                                          codificacaoSistema: Byte): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Configurar impressao em duas cores }
{-* @param tipo }
{-* COR_FRACA_DESABILITADA = desativa impressao em duas cores }
{-* COR_FRACA_CARACTERE_COMPLETO = ativa impressao em duas cores Completa }
{-* COR_FRACA_MEIO_CARACTERE = ativa impressao em duas cores metade da linha }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  configurarCor: function(tipo: Char): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Configurar impressao com cores invertidas }
{-* @param ativar (1 = ativa impressao invertida, 0 = desativa impressao invertida) }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  configurarCorInvertida: function(ativar: Char): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Configura texto para ser impresso com largura dupla }
{-* @param ativar (1 = ativa largura dupla, 0 = desativa largura dupla) }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  configurarLarguraDupla: function(ativar: Char): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Configura texto para ser impresso em negrito }
{-* @param ativar (1 = ativa negrito, 0 = desativa negrito) }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  configurarNegrito: function(ativar: Char): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Configura texto para ser impresso sobrescrito }
{-* @param ativar (1 = ativa sobrescrito, 0 = desativa sobrescrito) }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  configurarSobrescrito: function(ativar: Char): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Configura texto para ser impresso sublinhado }
{-* @param ativar (1 = ativa sublinhado, 0 = desativa sublinhado) }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  configurarSublinhado: function(ativar: Char): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Configura texto para ser impresso de cabeca para baixo }
{-* @param ativar (1 = ativa texto invertido, 0 = desativa texto invertido) }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  configurarTextoInvertido: function(ativar: Char): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Funcao utilitaria para conversao de caracteres. }
{-* @param codificacaoEntrada Indica a codificacao utilizada no texto de entrada. }
{-* CODIFICACAO_437 - Estados Unidos }
{-* CODIFICACAO_858 - Multilingue (Padrao da impressora) }
{-* CODIFICACAO_863 - Frances do Canada }
{-* CODIFICACAO_860 - Portugal }
{-* CODIFICACAO_865 - Noruega }
{-* CODIFICACAO_GENERICA - Pagina generica da impressora }
{-* CODIFICACAO_DEFINIDA_PELO_USUARIO - Paginacao carregada pelo usuario na impressora. }
{-* CODIFICACAO_869 - Grego }
{-* CODIFICACAO_857 - Turco }
{-* CODIFICACAO_864 - Arabe }
{-* CODIFICACAO_867 - Hebraico (Israel) }
{-* CODIFICACAO_852 - Hungaro, Polones, Tcheco, Romeno, Eslovaco, Esloveno, Croata }
{-* CODIFICACAO_848 - Ucraniano }
{-* CODIFICACAO_866 - Russo (cirilico) }
{-* ODIFICACAO_872 - Bulgaro, Servio }
{-* CODIFICACAO_775 - Lituano, Letao, Estonia }
{-* CODIFICACAO_861 - Islandes }
{-* CODIFICACAO_1250 - Windows Latin 2 }
{-* CODIFICACAO_1251 - Windows Cirilico }
{-* CODIFICACAO_1252 - Windows Latin 1 }
{-* CODIFICACAO_1253 - Windows Grego }
{-* CODIFICACAO_1254 - Windows Turco }
{-* CODIFICACAO_1255 - Windows Hebraico }
{-* CODIFICACAO_1256 - Windows Arabe }
{-* CODIFICACAO_1257 - Windows Baltico (Rim) }
{-* @param caracteresEntrada Texto de entrada a ser convertido. }
{-* @param quantidadeCaracteres Tamanho do texto de entrada. }
{-* @param codificacaoSaida Indica a codificacao utilizada no conversao do texto de entrada, gerando o texto de saida. }
{-* CODIFICACAO_437 - Estados Unidos }
{-* CODIFICACAO_858 - Multilingue (Padrao da impressora) }
{-* CODIFICACAO_863 - Frances do Canada }
{-* CODIFICACAO_860 - Portugal }
{-* CODIFICACAO_865 - Noruega }
{-* CODIFICACAO_GENERICA - Pagina generica da impressora }
{-* CODIFICACAO_DEFINIDA_PELO_USUARIO - Paginacao carregada pelo usuario na impressora. }
{-* CODIFICACAO_869 - Grego }
{-* CODIFICACAO_857 - Turco }
{-* CODIFICACAO_864 - Arabe }
{-* CODIFICACAO_867 - Hebraico (Israel) }
{-* CODIFICACAO_852 - Hungaro, Polones, Tcheco, Romeno, Eslovaco, Esloveno, Croata }
{-* CODIFICACAO_848 - Ucraniano }
{-* CODIFICACAO_866 - Russo (cirilico) }
{-* ODIFICACAO_872 - Bulgaro, Servio }
{-* CODIFICACAO_775 - Lituano, Letao, Estonia }
{-* CODIFICACAO_861 - Islandes }
{-* CODIFICACAO_1250 - Windows Latin 2 }
{-* CODIFICACAO_1251 - Windows Cirilico }
{-* CODIFICACAO_1252 - Windows Latin 1 }
{-* CODIFICACAO_1253 - Windows Grego }
{-* CODIFICACAO_1254 - Windows Turco }
{-* CODIFICACAO_1255 - Windows Hebraico }
{-* CODIFICACAO_1256 - Windows Arabe }
{-* CODIFICACAO_1257 - Windows Baltico (Rim) }
{-* @param caracteresSaida Buffer de resposta com o texto convertido, deve possuir no minimo o tamanho do buffer de texto de entrada (caracteresEntrada). }
{-* @return Codigo de erro. }
{= }
var
  converterCaracteres: function(codificacaoEntrada: Byte; 
                                var caracteresEntrada: Byte; 
                                quantidadeCaracteres: Word; 
                                codificacaoSaida: Byte; 
                                var caracteresSaida: Byte): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Avanca n linhas e corta papel }
{-* @param numeroAvancoLinhas (Numero de linhas que serao avancadas antes de cortar o papel) }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  cortarPapel: function(numeroAvancoLinhas: Byte): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Define o diretorio onde estao localizado os arquivos de configuracao da biblioteca TGCS Sure Mark }
{-* @param diretorio Caminho relativo ou absoluto para o diretorio onde estao os arquivos de configuracao. }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  definirDiretorioConfiguracao: function(var diretorio: Byte): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Ejeta documento da estacao de documentos da impressora. }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  ejetarDocumento: function: EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Fecha comunicacao com a impressora }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  fecharComunicacao: function: EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Imprime codigo no formado QR Code com o conteudo do arquivo passado. }
{-* @param caminho caminho para o arquivo com o conteudo do QRCode }
{-* @param modoCodificacao Modo de codificacao dos dados inseridos: }
{-* QRCODE_MODO_CODIFICACAO_BYTE }
{-* QRCODE_MODO_CODIFICACAO_ALFANUMERICO }
{-* QRCODE_MODO_CODIFICACAO_NUMERICO }
{-* QRCODE_MODO_CODIFICACAO_KANJI }
{-* QRCODE_MODO_CODIFICACAO_ECI }
{-* QRCODE_MODO_CODIFICACAO_MIXING }
{-* @param nivelCorrecaoErro Nivel de correcao de erros. }
{-* QRCODE_ERROR_L7 - 7% }
{-* QRCODE_ERROR_M15 - 15% }
{-* QRCODE_ERROR_Q25 - 25% }
{-* QRCODE_ERROR_H30 - 30% }
{-* @param eci Extended Channel Interpretation (ECI) Mode. Valido domente se o modoCodificacao ECI for selecionado. }
{-* QRCODE_ECI_PDF417_DEFAULT_GLI }
{-* QRCODE_ECI_PDF417_LATIN1_GLI }
{-* QRCODE_ECI_PDF417_DEFAULT_ECI }
{-* QRCODE_ECI_ISO8859_1 }
{-* QRCODE_ECI_ISO8859_2 }
{-* QRCODE_ECI_ISO8859_3 }
{-* QRCODE_ECI_ISO8859_4 }
{-* QRCODE_ECI_ISO8859_5 }
{-* QRCODE_ECI_ISO8859_6 }
{-* QRCODE_ECI_ISO8859_7 }
{-* QRCODE_ECI_ISO8859_8 }
{-* QRCODE_ECI_ISO8859_9 }
{-* QRCODE_ECI_ISO8859_10 }
{-* QRCODE_ECI_ISO8859_11 }
{-* QRCODE_ECI_ISO8859_12 }
{-* QRCODE_ECI_ISO8859_13 }
{-* QRCODE_ECI_ISO8859_14 }
{-* QRCODE_ECI_ISO8859_15 }
{-* QRCODE_ECI_ISO8859_16 }
{-* QRCODE_ECI_SJIS }
{-* QRCODE_ECI_UTF8 }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  gerarQRcodeArquivo: function(var caminho: Byte; 
                               modoCodificacao: Byte; 
                               nivelCorrecaoErro: Byte; 
                               eci: Byte): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Imprime texto direto de arquivo .txt, o texto pode estar formatado com as tags de formatacao. }
{-* @param caminhoArquivo (caminho do arquivo que tera o conteudo impresso) }
{-* @return }
{= }
var
  impressaoDiretaArquivoTxt: function(var caminhoArquivo: Byte): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Imprime uma imagem Bitmap direto do arquivo }
{-* @param caminhoBitmap (caminho do arquivo Bitmap) }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  imprimirBitmap: function(var caminhoBitmap: Byte): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Imprime informacoes em cheque }
{-* @param codigoCheque (Codigo do banco do cheque que sera impresso) }
{-* @param imprimeVerso (Variavel que diz se havera impressao no verso do cheque neste comando) }
{-* @param valor (Valor do cheque) }
{-* @param tamanhoValor (Tamanho do campo valor) }
{-* @param favorecido (Nome do favorecido do cheque) }
{-* @param tamanhoFavorecido (Tamanho do campo favorecido) }
{-* @param local (Local do cheque) }
{-* @param tamanhoLocal (Tamanho do campo local) }
{-* @param data (Data do cheque no formato DDMMAAAA) }
{-* @param infoAdicionalFrente1 (Primeira linha de informacao adicional da frente do cheque) }
{-* @param tamanhoInfoAdicionalFrente1 (Tamanho da primeira linha de informacao adicional da frente do cheque) }
{-* @param infoAdicionalFrente2 (Segunda linha de informacao adicional da frente do cheque) }
{-* @param tamanhoInfoAdicionalFrente2 (Tamanho da segunda linha de informacao adicional da frente do cheque) }
{-* @param infoAdicionalFrente3 (Terceira linha de informacao adicional da frente do cheque) }
{-* @param tamanhoInfoAdicionalFrente3 (Tamanho da terceira linha de informacao adicional da frente do cheque) }
{-* @param infoAdicionalVerso1 (Primeira linha de informacao adicional do verso do cheque) }
{-* @param tamanhoInfoAdicionalVerso1 (Tamanho da primeira linha de informacao adicional do verso do cheque) }
{-* @param infoAdicionalVerso2 (Segunda linha de informacao adicional do verso do cheque) }
{-* @param tamanhoInfoAdicionalVerso2 (Tamanho da segunda linha de informacao adicional do verso do cheque) }
{-* @param infoAdicionalVerso3 (Terceira linha de informacao adicional do verso do cheque) }
{-* @param tamanhoInfoAdicionalVerso3 (Tamanho da terceira linha de informacao adicional do verso do cheque) }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  imprimirCheque: function(codigoCheque: Integer; 
                           imprimeVerso: Byte; 
                           var valor: Byte; 
                           tamanhoValor: Byte; 
                           var favorecido: Byte; 
                           tamanhoFavorecido: Byte; 
                           var local: Byte; 
                           tamanhoLocal: Byte; 
                           _9: Word; 
                           )
: EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 
{+//* }
{-* Imprime codigo de barras }
{-* @param tipo (Seleciona o tipo de codigo de barras que sera impresso) }
{-* CODIGO_BARRAS_UPCA }
{-* CODIGO_BARRAS_UPCE }
{-* CODIGO_BARRAS_JAN13 }
{-* CODIGO_BARRAS_JAN8 }
{-* CODIGO_BARRAS_CODE39 }
{-* CODIGO_BARRAS_ITF }
{-* CODIGO_BARRAS_CODABAR }
{-* CODIGO_BARRAS_CODE128C }
{-* CODIGO_BARRAS_CODE93 }
{-* CODIGO_BARRAS_CODE128ABC }
{-* }
{-* @param codigo (Codigo do codigo de barras) }
{-* @param tamanhoCodigo (Tamanho do codigo. Exemplo: codigo = "0123456789", tamanhoCodigo=10) }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  imprimirCodigoBarras: function(tipo: Byte; 
                                 var codigo: Byte; 
                                 tamanhoCodigo: Byte): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Imprime codigo de barras do tipo PDF417 }
{-* @param nivelCorrecaoErro1 (O byte de ordem superior do nivel de ECC (valor de 0 a 400, padrao = 00)) }
{-* @param nivelCorrecaoErro2 (O byte de ordem inferior do nivel de ECC (valor de 0 a 400, padrao = 15)) }
{-* @param truncar }
{-* 0 = desativa truncamento }
{-* 1 = ativa truncamento }
{-* @param largura (A dimensao de altura para a proporcao (valor de 1 a 9, padrao = 1)) }
{-* @param altura (A dimensao de largura para a proporcao (valor de 1 a 9, padrao = 2)) }
{-* @param codigo (Codigo do codigo de barras) }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  imprimirCodigoBarrasPDF417: function(nivelCorrecaoErro1: SmallInt; 
                                       nivelCorrecaoErro2: SmallInt; 
                                       truncar: Char; 
                                       largura: Char; 
                                       altura: Char; 
                                       var codigo: Byte; 
                                       tamanhoCodigo: Word): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 


{+//* }
{-* Imprime logo salvo na memoria da impressora }
{-* @param id (id do logo na impressora) }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  imprimirLogo: function(id: Byte): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Imprime pequeno logo na linha de impressao }
{-* @param largura (lagura do logo) }
{-* @param altura (altura do logo) }
{-* 0 = altura normal }
{-* 1 = altura dupla }
{-* @param dadosLogo (dados do logo) }
{-* @param tamanhoDados (quantidade de bytes enviados) }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  imprimirLogoSequencial: function(largura: Word; 
                                   altura: Byte; 
                                   var dadosLogo: Byte; 
                                   tamanhoDados: Word): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Imprime codigo no formado QR Code. }
{-* }
{-* @param modoCodificacao Modo de codificacao dos dados inseridos: }
{-* QRCODE_MODO_CODIFICACAO_BYTE }
{-* QRCODE_MODO_CODIFICACAO_ALFANUMERICO }
{-* QRCODE_MODO_CODIFICACAO_NUMERICO }
{-* QRCODE_MODO_CODIFICACAO_KANJI }
{-* QRCODE_MODO_CODIFICACAO_ECI }
{-* QRCODE_MODO_CODIFICACAO_MIXING }
{-* @param nivelCorrecaoErro Nivel de correcao de erros. }
{-* QRCODE_ERROR_L7 - 7% }
{-* QRCODE_ERROR_M15 - 15% }
{-* QRCODE_ERROR_Q25 - 25% }
{-* QRCODE_ERROR_H30 - 30% }
{-* @param eci Extended Channel Interpretation (ECI) Mode. Valido domente se o modoCodificacao ECI for selecionado. }
{-* QRCODE_ECI_PDF417_DEFAULT_GLI }
{-* QRCODE_ECI_PDF417_LATIN1_GLI }
{-* QRCODE_ECI_PDF417_DEFAULT_ECI }
{-* QRCODE_ECI_ISO8859_1 }
{-* QRCODE_ECI_ISO8859_2 }
{-* QRCODE_ECI_ISO8859_3 }
{-* QRCODE_ECI_ISO8859_4 }
{-* QRCODE_ECI_ISO8859_5 }
{-* QRCODE_ECI_ISO8859_6 }
{-* QRCODE_ECI_ISO8859_7 }
{-* QRCODE_ECI_ISO8859_8 }
{-* QRCODE_ECI_ISO8859_9 }
{-* QRCODE_ECI_ISO8859_10 }
{-* QRCODE_ECI_ISO8859_11 }
{-* QRCODE_ECI_ISO8859_12 }
{-* QRCODE_ECI_ISO8859_13 }
{-* QRCODE_ECI_ISO8859_14 }
{-* QRCODE_ECI_ISO8859_15 }
{-* QRCODE_ECI_ISO8859_16 }
{-* QRCODE_ECI_SJIS }
{-* QRCODE_ECI_UTF8 }
{-* @param dados Informacoes a serem impressas no qr code. }
{-* @param tamanhoDados quantidade de bytes enviados no parametro dados. }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  imprimirQRcode: function(modoCodificacao: Byte; 
                           nivelCorrecaoErro: Byte; 
                           eci: Byte; 
                           var dados: Byte; 
                           tamanhoDados: Word): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 


{+//* }
{-* Imprime texto }
{-* @param texto (Texto que sera impresso) }
{-* @param tamanhoTexto (Tamanho do argumento texto. Exemplo: texto="<n>texto</n>1234", tamanhoTexto=16) }
{-* }
{-* OBS: }
{-* O texto pode conter as TAGs a seguir: }
{-* tag desativar negrito - </n> }
{-* tag ativar negrito - <n> }
{-* tag desativar altura dupla - </ad> }
{-* tag ativar altura dupla - <ad> }
{-* tag desativar largura dupla - </ld> }
{-* tag ativar largura dupla - <ld> }
{-* tag desativar sublinhado - </su> }
{-* tag ativar sublinhado - <su> }
{-* tag desativar sobrescrito - </sb> }
{-* tag ativar sobrescrito - <sb> }
{-* tag desativar cor invertida - </ci> }
{-* tag ativar cor invertida - <ci> }
{-* tag desativar cor fraca caractere completo - </cc> }
{-* tag ativar cor fraca caractere completo - <cc> }
{-* tag desativar cor fraca meio caractere - </cm> }
{-* tag ativar cor fraca meio caractere - <cm> }
{-* tag desativar texto invertido - </ti> }
{-* tag ativar texto invertido - <ti> }
{-* tag nova linha - <nl> }
{-* tag tabulacao - <tb> }
{-* tag cortar papel - <cp> }
{-* tag alinhamento a esquerda - <ale> }
{-* tag alinhamento centro - <alc> }
{-* tag alinhamento a direita - <ald> }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  imprimirTexto: function(var texto: Byte; 
                          tamanhoTexto: Word): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Imprime texto pre-definido salvo na impressora }
{-* @param id (id do texto na impressora) }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  imprimirTextoPreDefinido: function(id: Byte): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Imprime linhas adicionais no verso do cheque }
{-* @param codigoCheque (Codigo do banco emissor do cheque) }
{-* @param linha1 (Primeira linha que sera impressa) }
{-* @param tamanhoLinha1 (tamanho da primeira linha que sera impressa) }
{-* @param linha2 (Segunda linha que sera impressa) }
{-* @param tamanhoLinha2 (tamanho da segunda linha que sera impressa) }
{-* @param linha3 (Terceira linha que sera impressa) }
{-* @param tamanhoLinha3 (tamanho da terceira linha que sera impressa) }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  imprimirVersoCheque: function(codigoCheque: Integer; 
                                var linha1: Byte; 
                                tamanhoLinha1: Byte; 
                                var linha2: Byte; 
                                tamanhoLinha2: Byte; 
                                var linha3: Byte; 
                                tamanhoLinha3: Byte): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Ler informacoes sobre a conta a partir da linha de caracteres de tinta magnetica em cheques. }
{-* @param resposta (Conteudo lido das linhas magneticas) }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  lerCMC7: function(var resposta: Byte): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Retorna status da impressora }
{-* @param status (Vetor com status da impressora.) }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  lerStatus: function(var status: Byte): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Forca a impressao do buffer contido na impressora. }
{-* Este comando deve ser usado quando o erro de BUFFER_CHEIO for retornado. }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  obrigarImpressao: function: EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Retorna o modelo da impressora conectada atualmente }
{-* @param modelo Modelo da impressora }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  obterModeloImpressora: function(var modelo: Byte): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Retorna a versao da biblioteca de comunicacao atual }
{-* @param versao (parametro que ira receber a versao da biblioteca de comunicacao atual (tamanho do vetor = 8 bytes)) }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  obterVersaoBiblioteca: function(var versao: Byte): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Retorna a versao do Firmware da impressora }
{-* @param versao (parametro que ira receber a versao do Firmware da impressora (tamanho do vetor = TAMANHO_VERSAO_FIRMWARE_BYTES)) }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  obterVersaoFirmware: function(var versao: Byte): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Posiciona documento para autenticacao. }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  posicionarDocumento: function: EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Reinicia a impressora, reinicia configuracoes e cancela buffer de impressao }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  reiniciarImpressora: function: EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Seleciona a altura do codigo de barras }
{-* @param altura (Altura do codigo de barras (valor entre 1 e 255, padrao = 162)) }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  selecionaAlturaCodigoBarras: function(altura: Byte): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Seleciona a pagina de codigos a ser utilizada na impressao }
{-* @param codificacao Pagina de codigo a ser utilizada }
{-* CODIFICACAO_437 - Estados Unidos }
{-* CODIFICACAO_858 - Multilingue (Padrao da impressora) }
{-* CODIFICACAO_863 - Frances do Canada }
{-* CODIFICACAO_860 - Portugal }
{-* CODIFICACAO_865 - Noruega }
{-* CODIFICACAO_GENERICA - Pagina generica da impressora }
{-* CODIFICACAO_DEFINIDA_PELO_USUARIO - Opcao de compatibilidade, nao usada }
{-* CODIFICACAO_869 - Grego }
{-* CODIFICACAO_857 - Turco }
{-* CODIFICACAO_864 - Arabe }
{-* CODIFICACAO_867 - Hebraico (Israel) }
{-* CODIFICACAO_852 - Hungaro, Polones, Tcheco, Romeno, Eslovaco, Esloveno, Croata }
{-* CODIFICACAO_848 - Ucraniano }
{-* CODIFICACAO_866 - Russo (cirilico) }
{-* ODIFICACAO_872 - Bulgaro, Servio }
{-* CODIFICACAO_775 - Lituano, Letao, Estonia }
{-* CODIFICACAO_861 - Islandes }
{-* CODIFICACAO_1250 - Windows Latin 2 }
{-* CODIFICACAO_1251 - Windows Cirilico }
{-* CODIFICACAO_1252 - Windows Latin 1 }
{-* CODIFICACAO_1253 - Windows Grego }
{-* CODIFICACAO_1254 - Windows Turco }
{-* CODIFICACAO_1255 - Windows Hebraico }
{-* CODIFICACAO_1256 - Windows Arabe }
{-* CODIFICACAO_1257 - Windows Baltico (Rim) }
{-* CODIFICACAO_DEFINIDA_PELO_USUARIO_1 - Pagina de codigo 1 definida pelo usuario }
{-* CODIFICACAO_DEFINIDA_PELO_USUARIO_2 - Pagina de codigo 2 definida pelo usuario }
{-* CODIFICACAO_DEFINIDA_PELO_USUARIO_3 - Pagina de codigo 3 definida pelo usuario }
{-* CODIFICACAO_DEFINIDA_PELO_USUARIO_4 - Pagina de codigo 4 definida pelo usuario }
{-* }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  selecionaCodificacaoCaracteres: function(codificacao: Byte): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Seleciona fonte HRI para codigo de barras }
{-* @param fonte (Fonte do HRI do codigo de barras (valor 0 ou 1, padrao = 0)) }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  selecionaFonteHRICodigoBarras: function(fonte: Byte): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Seleciona largura do codigo de barras }
{-* @param largura (Largura do codigo de barras (valor de 2 a 4, padrao = 3)) }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  selecionaLarguraCodigoBarras: function(largura: Byte): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Seleciona posicao HRI do codigo de barras }
{-* @param posicao (Posicao do HRI no codigo de barras) }
{-* CODIGO_BARRAS_HRI_NAO_IMPRESSO (padrao) }
{-* CODIGO_BARRAS_HRI_ACIMA_DO_CODIGO_BARRAS }
{-* CODIGO_BARRAS_HRI_ABAIXO_DO_CODIGO_BARRAS }
{-* CODIGO_BARRAS_HRI_ACIMA_ABAIXO_DO_CODIGO_BARRAS }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  selecionaPosicaoHRICodigoBarras: function(posicao: Byte): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Retorna a codificacao de caracteres vigente na impressora. }
{-* @param codificacaoAtual Parametro de saida: codificacao de caracteres atual da impressora. }
{-* CODIFICACAO_437 - Estados Unidos }
{-* CODIFICACAO_858 - Multilingue (Padrao da impressora) }
{-* CODIFICACAO_863 - Frances do Canada }
{-* CODIFICACAO_860 - Portugal }
{-* CODIFICACAO_865 - Noruega }
{-* CODIFICACAO_GENERICA - Pagina generica da impressora }
{-* CODIFICACAO_DEFINIDA_PELO_USUARIO - Paginacao carregada pelo usuario na impressora. }
{-* CODIFICACAO_869 - Grego }
{-* CODIFICACAO_857 - Turco }
{-* CODIFICACAO_864 - Arabe }
{-* CODIFICACAO_867 - Hebraico (Israel) }
{-* CODIFICACAO_852 - Hungaro, Polones, Tcheco, Romeno, Eslovaco, Esloveno, Croata }
{-* CODIFICACAO_848 - Ucraniano }
{-* CODIFICACAO_866 - Russo (cirilico) }
{-* CODIFICACAO_872 - Bulgaro, Servio }
{-* CODIFICACAO_775 - Lituano, Letao, Estonia }
{-* CODIFICACAO_861 - Islandes }
{-* CODIFICACAO_1250 - Windows Latin 2 }
{-* CODIFICACAO_1251 - Windows Cirilico }
{-* CODIFICACAO_1252 - Windows Latin 1 }
{-* CODIFICACAO_1253 - Windows Grego }
{-* CODIFICACAO_1254 - Windows Turco }
{-* CODIFICACAO_1255 - Windows Hebraico }
{-* CODIFICACAO_1256 - Windows Arabe }
{-* CODIFICACAO_1257 - Windows Baltico (Rim) }
{-* @return Codigo de erro. }
{= }
var
  verificarCodificacaoCaracteres: function(var codificacaoAtual: Byte): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Verifica se existe documento inserido na impressora }
{-* @param statusDocumento }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  verificarDocumento: function(var statusDocumento: Byte): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Verifica se a gaveta de dinheiro esta aberta }
{-* @param gavetaAberta }
{-* 0 = gaveta fechada }
{-* 1 = gaveta aberta }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  verificarGaveta: function(var gavetaAbertaFimPapel: Byte): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Verifica logos cadastrados na impressora. }
{-* @param resposta (vetor de 255 posicoes com as resposta para cada id da impressora, onde:) }
{-* 0 = id nao cadastrado }
{-* 1 = id cadastrado }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  verificarLogo: function(var resposta: Byte): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Verifica se existe logo salvo no id passado. }
{-* @param id (id que sera verificado) }
{-* @param resposta }
{-* 0 = logo nao cadastrada }
{-* 1 = logo cadastrada }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  verificarLogoPorId: function(id: Byte; 
                               var resposta: Byte): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Verifica status do papel de impressao termica }
{-* @param statusPapel }
{-* STATUS_SEM_PAPEL 3 }
{-* STATUS_POUQUISSIMO_PAPEL 2 }
{-* STATUS_POUCO_PAPEL 1 }
{-* STATUS_PAPEL_OK 0 }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  verificarPapel: function(var statusPapel: Byte): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Verifica se a tampa de papel esta aberta }
{-* @param tampaAberta }
{-* 0 = tampa fechada }
{-* 1 = tampa aberta }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  verificarTampa: function(var tampaAberta: Byte): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Verifica textos pre definidos ja cadastradas }
{-* @param resposta (vetor de 255 posicoes com as resposta para cada id da impressora, onde:) }
{-* 0 = id nao cadastrado }
{-* 1 = id cadastrado }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  verificarTextoPreDefinido: function(var resposta: Byte): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{+//* }
{-* Verifica se existe texto salvo no id passado. }
{-* @param id (id que sera verificado) }
{-* @param resposta }
{-* 0 = texto nao cadastrada }
{-* 1 = texto cadastrada }
{-* @return 0 = OK }
{-* codigo do erro, caso contrario }
{= }
var
  verificarTextoPreDefinidoPorId: function(id: Byte; 
                                           var resposta: Byte): EXPORT_DLL SHORT cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; 

{$ENDIF /* TGCS1NR_H*/}



var
  DLLLoaded: Boolean { is DLL (dynamically) loaded already? }
    {$IFDEF WIN32} = False; {$ENDIF}

implementation

var
  SaveExit: pointer;
  DLLHandle: THandle;
{$IFNDEF MSDOS}
  ErrorMode: Integer;
{$ENDIF}

  procedure NewExit; far;
  begin
    ExitProc := SaveExit;
    FreeLibrary(DLLHandle)
  end {NewExit};

procedure LoadDLL;
begin
  if DLLLoaded then Exit;
{$IFNDEF MSDOS}
  ErrorMode := SetErrorMode($8000{SEM_NoOpenFileErrorBox});
{$ENDIF}
  DLLHandle := LoadLibrary('TGCSSUREMARK.DLL');
  if DLLHandle >= 32 then
  begin
    DLLLoaded := True;
    SaveExit := ExitProc;
    ExitProc := @NewExit;
    @abrirComunicacao := GetProcAddress(DLLHandle,'abrirComunicacao');
  {$IFDEF WIN32}
    Assert(@abrirComunicacao <> nil);
  {$ENDIF}
    @abrirGaveta := GetProcAddress(DLLHandle,'abrirGaveta');
  {$IFDEF WIN32}
    Assert(@abrirGaveta <> nil);
  {$ENDIF}
    @alinharTexto := GetProcAddress(DLLHandle,'alinharTexto');
  {$IFDEF WIN32}
    Assert(@alinharTexto <> nil);
  {$ENDIF}
    @apagarSetorMemoria := GetProcAddress(DLLHandle,'apagarSetorMemoria');
  {$IFDEF WIN32}
    Assert(@apagarSetorMemoria <> nil);
  {$ENDIF}
    @ativarCortePapel := GetProcAddress(DLLHandle,'ativarCortePapel');
  {$IFDEF WIN32}
    Assert(@ativarCortePapel <> nil);
  {$ENDIF}
    @ativarSinalSonoro := GetProcAddress(DLLHandle,'ativarSinalSonoro');
  {$IFDEF WIN32}
    Assert(@ativarSinalSonoro <> nil);
  {$ENDIF}
    @autenticarDocumento := GetProcAddress(DLLHandle,'autenticarDocumento');
  {$IFDEF WIN32}
    Assert(@autenticarDocumento <> nil);
  {$ENDIF}
    @avancarLinha := GetProcAddress(DLLHandle,'avancarLinha');
  {$IFDEF WIN32}
    Assert(@avancarLinha <> nil);
  {$ENDIF}
    @avancarTabulacao := GetProcAddress(DLLHandle,'avancarTabulacao');
  {$IFDEF WIN32}
    Assert(@avancarTabulacao <> nil);
  {$ENDIF}
    @carregaConjuntoCaracteres := GetProcAddress(DLLHandle,'carregaConjuntoCaracteres');
  {$IFDEF WIN32}
    Assert(@carregaConjuntoCaracteres <> nil);
  {$ENDIF}
    @carregarLogo := GetProcAddress(DLLHandle,'carregarLogo');
  {$IFDEF WIN32}
    Assert(@carregarLogo <> nil);
  {$ENDIF}
    @carregarTextoPreDefinido := GetProcAddress(DLLHandle,'carregarTextoPreDefinido');
  {$IFDEF WIN32}
    Assert(@carregarTextoPreDefinido <> nil);
  {$ENDIF}
    @cmdDireto := GetProcAddress(DLLHandle,'cmdDireto');
  {$IFDEF WIN32}
    Assert(@cmdDireto <> nil);
  {$ENDIF}
    @configurarAlturaDupla := GetProcAddress(DLLHandle,'configurarAlturaDupla');
  {$IFDEF WIN32}
    Assert(@configurarAlturaDupla <> nil);
  {$ENDIF}
    @configurarConversaoCaracteres := GetProcAddress(DLLHandle,'configurarConversaoCaracteres');
  {$IFDEF WIN32}
    Assert(@configurarConversaoCaracteres <> nil);
  {$ENDIF}
    @configurarCor := GetProcAddress(DLLHandle,'configurarCor');
  {$IFDEF WIN32}
    Assert(@configurarCor <> nil);
  {$ENDIF}
    @configurarCorInvertida := GetProcAddress(DLLHandle,'configurarCorInvertida');
  {$IFDEF WIN32}
    Assert(@configurarCorInvertida <> nil);
  {$ENDIF}
    @configurarLarguraDupla := GetProcAddress(DLLHandle,'configurarLarguraDupla');
  {$IFDEF WIN32}
    Assert(@configurarLarguraDupla <> nil);
  {$ENDIF}
    @configurarNegrito := GetProcAddress(DLLHandle,'configurarNegrito');
  {$IFDEF WIN32}
    Assert(@configurarNegrito <> nil);
  {$ENDIF}
    @configurarSobrescrito := GetProcAddress(DLLHandle,'configurarSobrescrito');
  {$IFDEF WIN32}
    Assert(@configurarSobrescrito <> nil);
  {$ENDIF}
    @configurarSublinhado := GetProcAddress(DLLHandle,'configurarSublinhado');
  {$IFDEF WIN32}
    Assert(@configurarSublinhado <> nil);
  {$ENDIF}
    @configurarTextoInvertido := GetProcAddress(DLLHandle,'configurarTextoInvertido');
  {$IFDEF WIN32}
    Assert(@configurarTextoInvertido <> nil);
  {$ENDIF}
    @converterCaracteres := GetProcAddress(DLLHandle,'converterCaracteres');
  {$IFDEF WIN32}
    Assert(@converterCaracteres <> nil);
  {$ENDIF}
    @cortarPapel := GetProcAddress(DLLHandle,'cortarPapel');
  {$IFDEF WIN32}
    Assert(@cortarPapel <> nil);
  {$ENDIF}
    @definirDiretorioConfiguracao := GetProcAddress(DLLHandle,'definirDiretorioConfiguracao');
  {$IFDEF WIN32}
    Assert(@definirDiretorioConfiguracao <> nil);
  {$ENDIF}
    @ejetarDocumento := GetProcAddress(DLLHandle,'ejetarDocumento');
  {$IFDEF WIN32}
    Assert(@ejetarDocumento <> nil);
  {$ENDIF}
    @fecharComunicacao := GetProcAddress(DLLHandle,'fecharComunicacao');
  {$IFDEF WIN32}
    Assert(@fecharComunicacao <> nil);
  {$ENDIF}
    @gerarQRcodeArquivo := GetProcAddress(DLLHandle,'gerarQRcodeArquivo');
  {$IFDEF WIN32}
    Assert(@gerarQRcodeArquivo <> nil);
  {$ENDIF}
    @impressaoDiretaArquivoTxt := GetProcAddress(DLLHandle,'impressaoDiretaArquivoTxt');
  {$IFDEF WIN32}
    Assert(@impressaoDiretaArquivoTxt <> nil);
  {$ENDIF}
    @imprimirBitmap := GetProcAddress(DLLHandle,'imprimirBitmap');
  {$IFDEF WIN32}
    Assert(@imprimirBitmap <> nil);
  {$ENDIF}
    @imprimirCheque := GetProcAddress(DLLHandle,'imprimirCheque');
  {$IFDEF WIN32}
    Assert(@imprimirCheque <> nil);
  {$ENDIF}
    @imprimirCodigoBarras := GetProcAddress(DLLHandle,'imprimirCodigoBarras');
  {$IFDEF WIN32}
    Assert(@imprimirCodigoBarras <> nil);
  {$ENDIF}
    @imprimirCodigoBarrasPDF417 := GetProcAddress(DLLHandle,'imprimirCodigoBarrasPDF417');
  {$IFDEF WIN32}
    Assert(@imprimirCodigoBarrasPDF417 <> nil);
  {$ENDIF}
    @imprimirLogo := GetProcAddress(DLLHandle,'imprimirLogo');
  {$IFDEF WIN32}
    Assert(@imprimirLogo <> nil);
  {$ENDIF}
    @imprimirLogoSequencial := GetProcAddress(DLLHandle,'imprimirLogoSequencial');
  {$IFDEF WIN32}
    Assert(@imprimirLogoSequencial <> nil);
  {$ENDIF}
    @imprimirQRcode := GetProcAddress(DLLHandle,'imprimirQRcode');
  {$IFDEF WIN32}
    Assert(@imprimirQRcode <> nil);
  {$ENDIF}
    @imprimirTexto := GetProcAddress(DLLHandle,'imprimirTexto');
  {$IFDEF WIN32}
    Assert(@imprimirTexto <> nil);
  {$ENDIF}
    @imprimirTextoPreDefinido := GetProcAddress(DLLHandle,'imprimirTextoPreDefinido');
  {$IFDEF WIN32}
    Assert(@imprimirTextoPreDefinido <> nil);
  {$ENDIF}
    @imprimirVersoCheque := GetProcAddress(DLLHandle,'imprimirVersoCheque');
  {$IFDEF WIN32}
    Assert(@imprimirVersoCheque <> nil);
  {$ENDIF}
    @lerCMC7 := GetProcAddress(DLLHandle,'lerCMC7');
  {$IFDEF WIN32}
    Assert(@lerCMC7 <> nil);
  {$ENDIF}
    @lerStatus := GetProcAddress(DLLHandle,'lerStatus');
  {$IFDEF WIN32}
    Assert(@lerStatus <> nil);
  {$ENDIF}
    @obrigarImpressao := GetProcAddress(DLLHandle,'obrigarImpressao');
  {$IFDEF WIN32}
    Assert(@obrigarImpressao <> nil);
  {$ENDIF}
    @obterModeloImpressora := GetProcAddress(DLLHandle,'obterModeloImpressora');
  {$IFDEF WIN32}
    Assert(@obterModeloImpressora <> nil);
  {$ENDIF}
    @obterVersaoBiblioteca := GetProcAddress(DLLHandle,'obterVersaoBiblioteca');
  {$IFDEF WIN32}
    Assert(@obterVersaoBiblioteca <> nil);
  {$ENDIF}
    @obterVersaoFirmware := GetProcAddress(DLLHandle,'obterVersaoFirmware');
  {$IFDEF WIN32}
    Assert(@obterVersaoFirmware <> nil);
  {$ENDIF}
    @posicionarDocumento := GetProcAddress(DLLHandle,'posicionarDocumento');
  {$IFDEF WIN32}
    Assert(@posicionarDocumento <> nil);
  {$ENDIF}
    @reiniciarImpressora := GetProcAddress(DLLHandle,'reiniciarImpressora');
  {$IFDEF WIN32}
    Assert(@reiniciarImpressora <> nil);
  {$ENDIF}
    @selecionaAlturaCodigoBarras := GetProcAddress(DLLHandle,'selecionaAlturaCodigoBarras');
  {$IFDEF WIN32}
    Assert(@selecionaAlturaCodigoBarras <> nil);
  {$ENDIF}
    @selecionaCodificacaoCaracteres := GetProcAddress(DLLHandle,'selecionaCodificacaoCaracteres');
  {$IFDEF WIN32}
    Assert(@selecionaCodificacaoCaracteres <> nil);
  {$ENDIF}
    @selecionaFonteHRICodigoBarras := GetProcAddress(DLLHandle,'selecionaFonteHRICodigoBarras');
  {$IFDEF WIN32}
    Assert(@selecionaFonteHRICodigoBarras <> nil);
  {$ENDIF}
    @selecionaLarguraCodigoBarras := GetProcAddress(DLLHandle,'selecionaLarguraCodigoBarras');
  {$IFDEF WIN32}
    Assert(@selecionaLarguraCodigoBarras <> nil);
  {$ENDIF}
    @selecionaPosicaoHRICodigoBarras := GetProcAddress(DLLHandle,'selecionaPosicaoHRICodigoBarras');
  {$IFDEF WIN32}
    Assert(@selecionaPosicaoHRICodigoBarras <> nil);
  {$ENDIF}
    @verificarCodificacaoCaracteres := GetProcAddress(DLLHandle,'verificarCodificacaoCaracteres');
  {$IFDEF WIN32}
    Assert(@verificarCodificacaoCaracteres <> nil);
  {$ENDIF}
    @verificarDocumento := GetProcAddress(DLLHandle,'verificarDocumento');
  {$IFDEF WIN32}
    Assert(@verificarDocumento <> nil);
  {$ENDIF}
    @verificarGaveta := GetProcAddress(DLLHandle,'verificarGaveta');
  {$IFDEF WIN32}
    Assert(@verificarGaveta <> nil);
  {$ENDIF}
    @verificarLogo := GetProcAddress(DLLHandle,'verificarLogo');
  {$IFDEF WIN32}
    Assert(@verificarLogo <> nil);
  {$ENDIF}
    @verificarLogoPorId := GetProcAddress(DLLHandle,'verificarLogoPorId');
  {$IFDEF WIN32}
    Assert(@verificarLogoPorId <> nil);
  {$ENDIF}
    @verificarPapel := GetProcAddress(DLLHandle,'verificarPapel');
  {$IFDEF WIN32}
    Assert(@verificarPapel <> nil);
  {$ENDIF}
    @verificarTampa := GetProcAddress(DLLHandle,'verificarTampa');
  {$IFDEF WIN32}
    Assert(@verificarTampa <> nil);
  {$ENDIF}
    @verificarTextoPreDefinido := GetProcAddress(DLLHandle,'verificarTextoPreDefinido');
  {$IFDEF WIN32}
    Assert(@verificarTextoPreDefinido <> nil);
  {$ENDIF}
    @verificarTextoPreDefinidoPorId := GetProcAddress(DLLHandle,'verificarTextoPreDefinidoPorId');
  {$IFDEF WIN32}
    Assert(@verificarTextoPreDefinidoPorId <> nil);
  {$ENDIF}
  end
  else
  begin
    DLLLoaded := False;
    { Error: TGCSSUREMARK.DLL could not be loaded !! }
  end;
{$IFNDEF MSDOS}
  SetErrorMode(ErrorMode)
{$ENDIF}
end {LoadDLL};

begin
  LoadDLL;
end.
